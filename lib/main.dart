import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';

Future<List<OfficesList>> load() async {
  final response = await http.get(Uri.parse(
      'https://www.metaweather.com/api/location/2122265/2022/01/19/'));

  if (response.statusCode == 200) {
    print(response.body);
    List<dynamic> jsons = jsonDecode(response.body);
    List<OfficesList> result = [];
    for (var value in jsons) {
      result.add(OfficesList.fromJson(value as Map<String, dynamic>));
    }
    return result;
  } else {
    throw Exception('Failed to load album');
  }
}

class OfficesList {
  List<Autogenerated> offices;
  OfficesList({required this.offices});

  factory OfficesList.fromJson(Map<String, dynamic> json) {
    var officesJson = json['array'] as List;
    List<Autogenerated> officesList =
        officesJson.map((i) => Autogenerated.fromJson(i)).toList();
    return OfficesList(offices: officesList);
  }
}

class Autogenerated {
  int id;
  String weatherStateName;
  String weatherStateAbbr;
  String windDirectionCompass;
  String created;
  String applicableDate;
  double minTemp;
  double maxTemp;
  double theTemp;
  double windSpeed;
  double windDirection;
  double airPressure;
  int humidity;
  double visibility;
  int predictability;

  Autogenerated(
      {required this.id,
      required this.weatherStateName,
      required this.weatherStateAbbr,
      required this.windDirectionCompass,
      required this.created,
      required this.applicableDate,
      required this.minTemp,
      required this.maxTemp,
      required this.theTemp,
      required this.windSpeed,
      required this.windDirection,
      required this.airPressure,
      required this.humidity,
      required this.visibility,
      required this.predictability});

  factory Autogenerated.fromJson(Map<String, dynamic> json) {
    return Autogenerated(
        id: json['id'],
        weatherStateName: json['weather_state_name'],
        weatherStateAbbr: json['weather_state_abbr'],
        windDirectionCompass: json['wind_direction_compass'],
        created: json['created'],
        applicableDate: json['applicable_date'],
        minTemp: json['min_temp'],
        maxTemp: json['max_temp'],
        theTemp: json['the_temp'],
        windSpeed: json['wind_speed'],
        windDirection: json['wind_direction'],
        airPressure: json['air_pressure'],
        humidity: json['humidity'],
        visibility: json['visibility'],
        predictability: json['predictability']);
  }
}

void main() => runApp(const MyApp());

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late Future<OfficesList> officesList;

  @override
  void initState() {
    super.initState();
    officesList = load() as Future<OfficesList>;
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fetch Data Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Fetch Data Example'),
        ),
        body: FutureBuilder<OfficesList>(
          future: officesList,
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              return ListView.builder(
                  itemCount: snapshot.data?.offices.length,
                  itemBuilder: (context, index) {
                    return Card(
                      child: ListTile(
                        title: Text('${snapshot.data?.offices[index].id}'),
                        subtitle: Text(
                            '${snapshot.data?.offices[index].weatherStateName}'),
                        isThreeLine: true,
                      ),
                    );
                  });
            } else if (snapshot.hasError) {
              return Text('${snapshot.error}');
            }

            // By default, show a loading spinner.
            return const CircularProgressIndicator();
          },
        ),
      ),
    );
  }
}
